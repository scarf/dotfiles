# shellcheck shell=bash
# shellcheck disable=SC2312

case "${TERM}" in
    xterm-color|*-256color) color_prompt=yes;;
    *) ;;
esac

__prompt_command() {
  # Save last exit code
  # shellcheck disable=SC2034
  PS1_exit=$?
  
  # Get dir listing
  PS1_dirList=$(\ls -Al --si)
  
  PS1_L1="╚═${PS1_Op}Exit ${PS1_exit}${PS1_Cl}══${PS1_Op}${color_prompt:+🗓️ }\d ${color_prompt:+🕛}\D{}${PS1_Cl}══${PS1_Op}\u(${color_prompt:+💻}$(tty | sed 's/\/dev\///'))@\h(${color_prompt:+⚡}$(__ps1_uptime))${PS1_Cl}══${PS1_Op}$(__ps1_utf8 🔥 ╳)${PS1_Cl}"
  PS1_L1_PAD=$(printf %"$(__ps1_l1_pad)"s | sed 's/ /═/g')
  PS1_L1+="${PS1_L1_PAD}╗\n"
  PS1_L2="╔══${PS1_Op}\!:\#${PS1_Cl}══${PS1_Op}$(jobs -r | wc -l)$(__ps1_utf8 🏃 r)/$(jobs -s | wc -l)$(__ps1_utf8 💤 s)${PS1_Cl}══${PS1_Op}\W($(__ps1_dirSize)B $(__ps1_utf8 📄 -)$(__ps1_files).$(__ps1_hiddenFiles) $(__ps1_utf8 💾 x)$(__ps1_execs) $(__ps1_utf8 📁 d)$(__ps1_dirs).$(__ps1_hiddenDirs) $(__ps1_utf8 🔗 l)$(__ps1_links) $(__ps1_utf8 '🖨️ ' s)$(__ps1_devs))${PS1_Cl}"
  PS1_L2_PAD=$(printf %"$(__ps1_l2_pad)"s | sed 's/ /═/g')
  PS1_L2+="${PS1_L2_PAD}╝\n"
  PS1_L3="╚═$(__ps1_utf8 ⮚ \>)$(__ps1_utf8 💲 \$) "
  
  PS1='$(eval "$PS1_COLORIZE_COMMAND" <<< "'${PS1_L1}${PS1_L2}${PS1_L3}'")'
}
PROMPT_COMMAND="__prompt_command${PROMPT_COMMAND:+"; ${PROMPT_COMMAND}"}"

__ps1_remove_newline() {
  sed -z 's/\(.*\)\n/\1/'
}
__ps1_color_wrap_non_printing() {
  local ESC; ESC=$(echo -e '\033')
  local SOH; SOH=$(echo -e '\001')
  local STX; STX=$(echo -e '\002')
  local REGEX; REGEX=${ESC}'\[[[:digit:];]*m'
  local REPLACE; REPLACE=${SOH}'&'${STX}
  sed "s/${REGEX}/${REPLACE}/g"
}
__ps1_lolcat() {
  if [[ "${color_prompt}" = yes ]]; then
    lolcat-c -b -f | __ps1_remove_newline | __ps1_color_wrap_non_printing
  else
    __ps1_remove_newline
  fi
}
PS1_COLORIZE_COMMAND='__ps1_lolcat'

# Print UTF-8 char?
__ps1_utf8(){
  if [[ "${color_prompt}" = yes ]]; then
    echo "$1"
  else
    echo "$2"
  fi
}
# Print UTF-8 opener?
__ps1_opener(){
  if [[ "${color_prompt}" = yes ]]; then
    echo "⟪"
  else
    echo "["
  fi  
}
# Print UTF-8 closer?
__ps1_closer(){
  if [[ "${color_prompt}" = yes ]]; then
    echo "⟫"
  else
    echo "]"
  fi  
}
PS1_Op=$(__ps1_opener)
PS1_Cl=$(__ps1_closer)

# Get uptime
__ps1_uptime(){
  local PS1_upsecs; PS1_upsecs=$(awk '{print $1}' /proc/uptime | awk -F . '{print $1}')
  date -ud @"${PS1_upsecs}" +$((PS1_upsecs/3600/24))d%H:%M
}

# Get dir stats
__ps1_dirSize(){ sed -n 1p <<< "${PS1_dirList}" | awk '{print $2}'; }
__ps1_files(){ grep "^-" <<< "${PS1_dirList}" | awk '{print $9}' | grep -cv "^\."; }
__ps1_hiddenFiles(){ grep "^-" <<< "${PS1_dirList}" | awk '{print $9}' | grep -c "^\."; }
__ps1_execs(){ grep -c "^-..x" <<< "${PS1_dirList}"; }
__ps1_dirs(){ grep "^d" <<< "${PS1_dirList}" | awk '{print $9}' | grep -cv "^\."; }
__ps1_hiddenDirs(){ grep "^d" <<< "${PS1_dirList}" | awk '{print $9}' | grep -c "^\."; }
__ps1_links(){ grep -c "^l" <<< "${PS1_dirList}"; }
__ps1_devs(){ grep -c "^[bcps]" <<< "${PS1_dirList}"; }

# Calculate Line 1 padding
__ps1_l1_pad () {
  local len pad
  len="$(wc -m <<< "${PS1_L1@P}")"
  if [[ "${color_prompt}" = yes ]]; then
    pad=$((COLUMNS-len-3))
  else
    pad=$((COLUMNS-len))
  fi
  echo "${pad}"
}

# Calculate Line 2 padding
__ps1_l2_pad () {
  local len pad
  len="$(wc -m <<< "${PS1_L2@P}")"
  if [[ "${color_prompt}" = yes ]]; then
    pad=$((COLUMNS-len-5))
  else
    pad=$((COLUMNS-len))
  fi
  echo "${pad}"
}